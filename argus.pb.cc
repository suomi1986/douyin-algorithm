// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: argus.proto

#include "argus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Argus::Argus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msappid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.licenseid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdkversionstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.envcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.platform_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bodyhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.queryhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secdevicetoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pskhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pskversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.algorithmcount_)*/nullptr
  , /*decltype(_impl_.magic_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.rand_)*/int64_t{0}
  , /*decltype(_impl_.createtime_)*/int64_t{0}
  , /*decltype(_impl_.sdkversion_)*/0
  , /*decltype(_impl_.pskcalhash_)*/0
  , /*decltype(_impl_.isapplicense_)*/int64_t{0}
  , /*decltype(_impl_.calltype_)*/0} {}
struct ArgusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArgusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArgusDefaultTypeInternal() {}
  union {
    Argus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArgusDefaultTypeInternal _Argus_default_instance_;
PROTOBUF_CONSTEXPR AlgorithmCount::AlgorithmCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signcount_)*/0
  , /*decltype(_impl_.reportcount_)*/0
  , /*decltype(_impl_.settingcount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlgorithmCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlgorithmCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlgorithmCountDefaultTypeInternal() {}
  union {
    AlgorithmCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlgorithmCountDefaultTypeInternal _AlgorithmCount_default_instance_;
static ::_pb::Metadata file_level_metadata_argus_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_argus_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_argus_2eproto = nullptr;

const uint32_t TableStruct_argus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Argus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.magic_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.rand_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.msappid_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.licenseid_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.appversion_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.sdkversionstr_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.sdkversion_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.envcode_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.createtime_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.bodyhash_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.queryhash_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.algorithmcount_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.secdevicetoken_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.isapplicense_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.pskhash_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.pskcalhash_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.pskversion_),
  PROTOBUF_FIELD_OFFSET(::Argus, _impl_.calltype_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  2,
  3,
  ~0u,
  4,
  7,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AlgorithmCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AlgorithmCount, _impl_.signcount_),
  PROTOBUF_FIELD_OFFSET(::AlgorithmCount, _impl_.reportcount_),
  PROTOBUF_FIELD_OFFSET(::AlgorithmCount, _impl_.settingcount_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, -1, sizeof(::Argus)},
  { 48, -1, -1, sizeof(::AlgorithmCount)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Argus_default_instance_._instance,
  &::_AlgorithmCount_default_instance_._instance,
};

const char descriptor_table_protodef_argus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013argus.proto\"\304\004\n\005Argus\022\r\n\005magic\030\001 \001(\005\022\017"
  "\n\007version\030\002 \001(\005\022\014\n\004rand\030\003 \001(\003\022\017\n\007msAppID"
  "\030\004 \001(\t\022\025\n\010deviceID\030\005 \001(\tH\000\210\001\001\022\021\n\tlicense"
  "ID\030\006 \001(\t\022\022\n\nappVersion\030\007 \001(\t\022\025\n\rsdkVersi"
  "onStr\030\010 \001(\t\022\022\n\nsdkVersion\030\t \001(\005\022\017\n\007envCo"
  "de\030\n \001(\014\022\025\n\010platform\030\013 \001(\tH\001\210\001\001\022\022\n\ncreat"
  "eTime\030\014 \001(\003\022\025\n\010bodyHash\030\r \001(\014H\002\210\001\001\022\026\n\tqu"
  "eryHash\030\016 \001(\014H\003\210\001\001\022\'\n\016algorithmCount\030\017 \001"
  "(\0132\017.AlgorithmCount\022\033\n\016secDeviceToken\030\020 "
  "\001(\tH\004\210\001\001\022\031\n\014isAppLicense\030\021 \001(\003H\005\210\001\001\022\024\n\007p"
  "skHash\030\022 \001(\tH\006\210\001\001\022\027\n\npskCalHash\030\023 \001(\005H\007\210"
  "\001\001\022\022\n\npskVersion\030\024 \001(\t\022\020\n\010callType\030\025 \001(\005"
  "B\013\n\t_deviceIDB\013\n\t_platformB\013\n\t_bodyHashB"
  "\014\n\n_queryHashB\021\n\017_secDeviceTokenB\017\n\r_isA"
  "ppLicenseB\n\n\010_pskHashB\r\n\013_pskCalHash\"N\n\016"
  "AlgorithmCount\022\021\n\tsignCount\030\001 \001(\005\022\023\n\013rep"
  "ortCount\030\002 \001(\005\022\024\n\014settingCount\030\003 \001(\005b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_argus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_argus_2eproto = {
    false, false, 684, descriptor_table_protodef_argus_2eproto,
    "argus.proto",
    &descriptor_table_argus_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_argus_2eproto::offsets,
    file_level_metadata_argus_2eproto, file_level_enum_descriptors_argus_2eproto,
    file_level_service_descriptors_argus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_argus_2eproto_getter() {
  return &descriptor_table_argus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_argus_2eproto(&descriptor_table_argus_2eproto);

// ===================================================================

class Argus::_Internal {
 public:
  using HasBits = decltype(std::declval<Argus>()._impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bodyhash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_queryhash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::AlgorithmCount& algorithmcount(const Argus* msg);
  static void set_has_secdevicetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isapplicense(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pskhash(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pskcalhash(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::AlgorithmCount&
Argus::_Internal::algorithmcount(const Argus* msg) {
  return *msg->_impl_.algorithmcount_;
}
Argus::Argus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Argus)
}
Argus::Argus(const Argus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Argus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msappid_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.licenseid_){}
    , decltype(_impl_.appversion_){}
    , decltype(_impl_.sdkversionstr_){}
    , decltype(_impl_.envcode_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.bodyhash_){}
    , decltype(_impl_.queryhash_){}
    , decltype(_impl_.secdevicetoken_){}
    , decltype(_impl_.pskhash_){}
    , decltype(_impl_.pskversion_){}
    , decltype(_impl_.algorithmcount_){nullptr}
    , decltype(_impl_.magic_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.rand_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.sdkversion_){}
    , decltype(_impl_.pskcalhash_){}
    , decltype(_impl_.isapplicense_){}
    , decltype(_impl_.calltype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msappid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msappid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msappid().empty()) {
    _this->_impl_.msappid_.Set(from._internal_msappid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deviceid()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.licenseid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.licenseid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_licenseid().empty()) {
    _this->_impl_.licenseid_.Set(from._internal_licenseid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.appversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appversion().empty()) {
    _this->_impl_.appversion_.Set(from._internal_appversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdkversionstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdkversionstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdkversionstr().empty()) {
    _this->_impl_.sdkversionstr_.Set(from._internal_sdkversionstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.envcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.envcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_envcode().empty()) {
    _this->_impl_.envcode_.Set(from._internal_envcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_platform()) {
    _this->_impl_.platform_.Set(from._internal_platform(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bodyhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bodyhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bodyhash()) {
    _this->_impl_.bodyhash_.Set(from._internal_bodyhash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.queryhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.queryhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_queryhash()) {
    _this->_impl_.queryhash_.Set(from._internal_queryhash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secdevicetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secdevicetoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_secdevicetoken()) {
    _this->_impl_.secdevicetoken_.Set(from._internal_secdevicetoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pskhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pskhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pskhash()) {
    _this->_impl_.pskhash_.Set(from._internal_pskhash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pskversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pskversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pskversion().empty()) {
    _this->_impl_.pskversion_.Set(from._internal_pskversion(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_algorithmcount()) {
    _this->_impl_.algorithmcount_ = new ::AlgorithmCount(*from._impl_.algorithmcount_);
  }
  ::memcpy(&_impl_.magic_, &from._impl_.magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.calltype_) -
    reinterpret_cast<char*>(&_impl_.magic_)) + sizeof(_impl_.calltype_));
  // @@protoc_insertion_point(copy_constructor:Argus)
}

inline void Argus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msappid_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.licenseid_){}
    , decltype(_impl_.appversion_){}
    , decltype(_impl_.sdkversionstr_){}
    , decltype(_impl_.envcode_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.bodyhash_){}
    , decltype(_impl_.queryhash_){}
    , decltype(_impl_.secdevicetoken_){}
    , decltype(_impl_.pskhash_){}
    , decltype(_impl_.pskversion_){}
    , decltype(_impl_.algorithmcount_){nullptr}
    , decltype(_impl_.magic_){0}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.rand_){int64_t{0}}
    , decltype(_impl_.createtime_){int64_t{0}}
    , decltype(_impl_.sdkversion_){0}
    , decltype(_impl_.pskcalhash_){0}
    , decltype(_impl_.isapplicense_){int64_t{0}}
    , decltype(_impl_.calltype_){0}
  };
  _impl_.msappid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msappid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.licenseid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.licenseid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdkversionstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdkversionstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.envcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.envcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bodyhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bodyhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.queryhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.queryhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secdevicetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secdevicetoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pskhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pskhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pskversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pskversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Argus::~Argus() {
  // @@protoc_insertion_point(destructor:Argus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Argus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msappid_.Destroy();
  _impl_.deviceid_.Destroy();
  _impl_.licenseid_.Destroy();
  _impl_.appversion_.Destroy();
  _impl_.sdkversionstr_.Destroy();
  _impl_.envcode_.Destroy();
  _impl_.platform_.Destroy();
  _impl_.bodyhash_.Destroy();
  _impl_.queryhash_.Destroy();
  _impl_.secdevicetoken_.Destroy();
  _impl_.pskhash_.Destroy();
  _impl_.pskversion_.Destroy();
  if (this != internal_default_instance()) delete _impl_.algorithmcount_;
}

void Argus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Argus::Clear() {
// @@protoc_insertion_point(message_clear_start:Argus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msappid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.deviceid_.ClearNonDefaultToEmpty();
  }
  _impl_.licenseid_.ClearToEmpty();
  _impl_.appversion_.ClearToEmpty();
  _impl_.sdkversionstr_.ClearToEmpty();
  _impl_.envcode_.ClearToEmpty();
  if (cached_has_bits & 0x0000003eu) {
    if (cached_has_bits & 0x00000002u) {
      _impl_.platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.bodyhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.queryhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.secdevicetoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.pskhash_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.pskversion_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.algorithmcount_ != nullptr) {
    delete _impl_.algorithmcount_;
  }
  _impl_.algorithmcount_ = nullptr;
  ::memset(&_impl_.magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sdkversion_) -
      reinterpret_cast<char*>(&_impl_.magic_)) + sizeof(_impl_.sdkversion_));
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.pskcalhash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isapplicense_) -
        reinterpret_cast<char*>(&_impl_.pskcalhash_)) + sizeof(_impl_.isapplicense_));
  }
  _impl_.calltype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Argus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 rand = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msAppID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msappid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Argus.msAppID"));
        } else
          goto handle_unusual;
        continue;
      // optional string deviceID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Argus.deviceID"));
        } else
          goto handle_unusual;
        continue;
      // string licenseID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_licenseid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Argus.licenseID"));
        } else
          goto handle_unusual;
        continue;
      // string appVersion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_appversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Argus.appVersion"));
        } else
          goto handle_unusual;
        continue;
      // string sdkVersionStr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sdkversionstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Argus.sdkVersionStr"));
        } else
          goto handle_unusual;
        continue;
      // int32 sdkVersion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.sdkversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes envCode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_envcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string platform = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_platform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Argus.platform"));
        } else
          goto handle_unusual;
        continue;
      // int64 createTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes bodyHash = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_bodyhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes queryHash = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_queryhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AlgorithmCount algorithmCount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithmcount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string secDeviceToken = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_secdevicetoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Argus.secDeviceToken"));
        } else
          goto handle_unusual;
        continue;
      // optional int64 isAppLicense = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_isapplicense(&has_bits);
          _impl_.isapplicense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pskHash = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_pskhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Argus.pskHash"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 pskCalHash = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_pskcalhash(&has_bits);
          _impl_.pskcalhash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pskVersion = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_pskversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Argus.pskVersion"));
        } else
          goto handle_unusual;
        continue;
      // int32 callType = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.calltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Argus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Argus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 magic = 1;
  if (this->_internal_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_magic(), target);
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // int64 rand = 3;
  if (this->_internal_rand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_rand(), target);
  }

  // string msAppID = 4;
  if (!this->_internal_msappid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msappid().data(), static_cast<int>(this->_internal_msappid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Argus.msAppID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msappid(), target);
  }

  // optional string deviceID = 5;
  if (_internal_has_deviceid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Argus.deviceID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_deviceid(), target);
  }

  // string licenseID = 6;
  if (!this->_internal_licenseid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_licenseid().data(), static_cast<int>(this->_internal_licenseid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Argus.licenseID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_licenseid(), target);
  }

  // string appVersion = 7;
  if (!this->_internal_appversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appversion().data(), static_cast<int>(this->_internal_appversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Argus.appVersion");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_appversion(), target);
  }

  // string sdkVersionStr = 8;
  if (!this->_internal_sdkversionstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdkversionstr().data(), static_cast<int>(this->_internal_sdkversionstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Argus.sdkVersionStr");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sdkversionstr(), target);
  }

  // int32 sdkVersion = 9;
  if (this->_internal_sdkversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_sdkversion(), target);
  }

  // bytes envCode = 10;
  if (!this->_internal_envcode().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_envcode(), target);
  }

  // optional string platform = 11;
  if (_internal_has_platform()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Argus.platform");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_platform(), target);
  }

  // int64 createTime = 12;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_createtime(), target);
  }

  // optional bytes bodyHash = 13;
  if (_internal_has_bodyhash()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_bodyhash(), target);
  }

  // optional bytes queryHash = 14;
  if (_internal_has_queryhash()) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_queryhash(), target);
  }

  // .AlgorithmCount algorithmCount = 15;
  if (this->_internal_has_algorithmcount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::algorithmcount(this),
        _Internal::algorithmcount(this).GetCachedSize(), target, stream);
  }

  // optional string secDeviceToken = 16;
  if (_internal_has_secdevicetoken()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secdevicetoken().data(), static_cast<int>(this->_internal_secdevicetoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Argus.secDeviceToken");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_secdevicetoken(), target);
  }

  // optional int64 isAppLicense = 17;
  if (_internal_has_isapplicense()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_isapplicense(), target);
  }

  // optional string pskHash = 18;
  if (_internal_has_pskhash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pskhash().data(), static_cast<int>(this->_internal_pskhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Argus.pskHash");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_pskhash(), target);
  }

  // optional int32 pskCalHash = 19;
  if (_internal_has_pskcalhash()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_pskcalhash(), target);
  }

  // string pskVersion = 20;
  if (!this->_internal_pskversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pskversion().data(), static_cast<int>(this->_internal_pskversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Argus.pskVersion");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_pskversion(), target);
  }

  // int32 callType = 21;
  if (this->_internal_calltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_calltype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Argus)
  return target;
}

size_t Argus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Argus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msAppID = 4;
  if (!this->_internal_msappid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msappid());
  }

  // optional string deviceID = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string licenseID = 6;
  if (!this->_internal_licenseid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_licenseid());
  }

  // string appVersion = 7;
  if (!this->_internal_appversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appversion());
  }

  // string sdkVersionStr = 8;
  if (!this->_internal_sdkversionstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdkversionstr());
  }

  // bytes envCode = 10;
  if (!this->_internal_envcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_envcode());
  }

  if (cached_has_bits & 0x0000003eu) {
    // optional string platform = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform());
    }

    // optional bytes bodyHash = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bodyhash());
    }

    // optional bytes queryHash = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_queryhash());
    }

    // optional string secDeviceToken = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_secdevicetoken());
    }

    // optional string pskHash = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pskhash());
    }

  }
  // string pskVersion = 20;
  if (!this->_internal_pskversion().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pskversion());
  }

  // .AlgorithmCount algorithmCount = 15;
  if (this->_internal_has_algorithmcount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.algorithmcount_);
  }

  // int32 magic = 1;
  if (this->_internal_magic() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_magic());
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // int64 rand = 3;
  if (this->_internal_rand() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rand());
  }

  // int64 createTime = 12;
  if (this->_internal_createtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_createtime());
  }

  // int32 sdkVersion = 9;
  if (this->_internal_sdkversion() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sdkversion());
  }

  if (cached_has_bits & 0x000000c0u) {
    // optional int32 pskCalHash = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_pskcalhash());
    }

    // optional int64 isAppLicense = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_isapplicense());
    }

  }
  // int32 callType = 21;
  if (this->_internal_calltype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_calltype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Argus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Argus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Argus::GetClassData() const { return &_class_data_; }


void Argus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Argus*>(&to_msg);
  auto& from = static_cast<const Argus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Argus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msappid().empty()) {
    _this->_internal_set_msappid(from._internal_msappid());
  }
  if (from._internal_has_deviceid()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_licenseid().empty()) {
    _this->_internal_set_licenseid(from._internal_licenseid());
  }
  if (!from._internal_appversion().empty()) {
    _this->_internal_set_appversion(from._internal_appversion());
  }
  if (!from._internal_sdkversionstr().empty()) {
    _this->_internal_set_sdkversionstr(from._internal_sdkversionstr());
  }
  if (!from._internal_envcode().empty()) {
    _this->_internal_set_envcode(from._internal_envcode());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_bodyhash(from._internal_bodyhash());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_queryhash(from._internal_queryhash());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_secdevicetoken(from._internal_secdevicetoken());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_pskhash(from._internal_pskhash());
    }
  }
  if (!from._internal_pskversion().empty()) {
    _this->_internal_set_pskversion(from._internal_pskversion());
  }
  if (from._internal_has_algorithmcount()) {
    _this->_internal_mutable_algorithmcount()->::AlgorithmCount::MergeFrom(
        from._internal_algorithmcount());
  }
  if (from._internal_magic() != 0) {
    _this->_internal_set_magic(from._internal_magic());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_rand() != 0) {
    _this->_internal_set_rand(from._internal_rand());
  }
  if (from._internal_createtime() != 0) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_sdkversion() != 0) {
    _this->_internal_set_sdkversion(from._internal_sdkversion());
  }
  if (cached_has_bits & 0x000000c0u) {
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pskcalhash_ = from._impl_.pskcalhash_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.isapplicense_ = from._impl_.isapplicense_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_calltype() != 0) {
    _this->_internal_set_calltype(from._internal_calltype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Argus::CopyFrom(const Argus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Argus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argus::IsInitialized() const {
  return true;
}

void Argus::InternalSwap(Argus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msappid_, lhs_arena,
      &other->_impl_.msappid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.licenseid_, lhs_arena,
      &other->_impl_.licenseid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appversion_, lhs_arena,
      &other->_impl_.appversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdkversionstr_, lhs_arena,
      &other->_impl_.sdkversionstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.envcode_, lhs_arena,
      &other->_impl_.envcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.platform_, lhs_arena,
      &other->_impl_.platform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bodyhash_, lhs_arena,
      &other->_impl_.bodyhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.queryhash_, lhs_arena,
      &other->_impl_.queryhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secdevicetoken_, lhs_arena,
      &other->_impl_.secdevicetoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pskhash_, lhs_arena,
      &other->_impl_.pskhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pskversion_, lhs_arena,
      &other->_impl_.pskversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Argus, _impl_.calltype_)
      + sizeof(Argus::_impl_.calltype_)
      - PROTOBUF_FIELD_OFFSET(Argus, _impl_.algorithmcount_)>(
          reinterpret_cast<char*>(&_impl_.algorithmcount_),
          reinterpret_cast<char*>(&other->_impl_.algorithmcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Argus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_argus_2eproto_getter, &descriptor_table_argus_2eproto_once,
      file_level_metadata_argus_2eproto[0]);
}

// ===================================================================

class AlgorithmCount::_Internal {
 public:
};

AlgorithmCount::AlgorithmCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AlgorithmCount)
}
AlgorithmCount::AlgorithmCount(const AlgorithmCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlgorithmCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signcount_){}
    , decltype(_impl_.reportcount_){}
    , decltype(_impl_.settingcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.signcount_, &from._impl_.signcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.settingcount_) -
    reinterpret_cast<char*>(&_impl_.signcount_)) + sizeof(_impl_.settingcount_));
  // @@protoc_insertion_point(copy_constructor:AlgorithmCount)
}

inline void AlgorithmCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signcount_){0}
    , decltype(_impl_.reportcount_){0}
    , decltype(_impl_.settingcount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlgorithmCount::~AlgorithmCount() {
  // @@protoc_insertion_point(destructor:AlgorithmCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlgorithmCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AlgorithmCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlgorithmCount::Clear() {
// @@protoc_insertion_point(message_clear_start:AlgorithmCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.signcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.settingcount_) -
      reinterpret_cast<char*>(&_impl_.signcount_)) + sizeof(_impl_.settingcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgorithmCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 signCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.signcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reportCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reportcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 settingCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.settingcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlgorithmCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlgorithmCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 signCount = 1;
  if (this->_internal_signcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_signcount(), target);
  }

  // int32 reportCount = 2;
  if (this->_internal_reportcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_reportcount(), target);
  }

  // int32 settingCount = 3;
  if (this->_internal_settingcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_settingcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlgorithmCount)
  return target;
}

size_t AlgorithmCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlgorithmCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 signCount = 1;
  if (this->_internal_signcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_signcount());
  }

  // int32 reportCount = 2;
  if (this->_internal_reportcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reportcount());
  }

  // int32 settingCount = 3;
  if (this->_internal_settingcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_settingcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlgorithmCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlgorithmCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlgorithmCount::GetClassData() const { return &_class_data_; }


void AlgorithmCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlgorithmCount*>(&to_msg);
  auto& from = static_cast<const AlgorithmCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AlgorithmCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_signcount() != 0) {
    _this->_internal_set_signcount(from._internal_signcount());
  }
  if (from._internal_reportcount() != 0) {
    _this->_internal_set_reportcount(from._internal_reportcount());
  }
  if (from._internal_settingcount() != 0) {
    _this->_internal_set_settingcount(from._internal_settingcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlgorithmCount::CopyFrom(const AlgorithmCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlgorithmCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmCount::IsInitialized() const {
  return true;
}

void AlgorithmCount::InternalSwap(AlgorithmCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlgorithmCount, _impl_.settingcount_)
      + sizeof(AlgorithmCount::_impl_.settingcount_)
      - PROTOBUF_FIELD_OFFSET(AlgorithmCount, _impl_.signcount_)>(
          reinterpret_cast<char*>(&_impl_.signcount_),
          reinterpret_cast<char*>(&other->_impl_.signcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_argus_2eproto_getter, &descriptor_table_argus_2eproto_once,
      file_level_metadata_argus_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Argus*
Arena::CreateMaybeMessage< ::Argus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Argus >(arena);
}
template<> PROTOBUF_NOINLINE ::AlgorithmCount*
Arena::CreateMaybeMessage< ::AlgorithmCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlgorithmCount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
